def sendSlackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
    
    node{
    echo "job name is: ${env.JOB_NAME}" 
    echo "job name is: ${env.BUILD_NUMBER}" 
    echo "job name is: ${env.JENKINS_URL}" 
    
    properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), pipelineTriggers([pollSCM('* * * * *')])])
    
    try{
    def mavenHome=tool name:'maven 3.8.4'
    //Get the code from GitHub Repo
    stage('CheckoutCode'){
        git branch: 'development', credentialsId: 'bf6fb5c2-9f48-4fef-94dc-9572ed7853b0', url: 'https://github.com/kollipavan/maven-web-application.git'
    }
    //Do the build by using Maven build tool
    stage('Build'){
        sh "${mavenHome}/bin/mvn clean package"
    }
    //Execute the SonarQube report
    stage('ExecuteSonarQubeReport'){
      sh "${mavenHome}/bin/mvn sonar:sonar"  
    }
    //Upload the artifact in artifact repository
    stage('UploadArtificatintoNexus'){
        sh "${mavenHome}/bin/mvn deploy" 
    }
    //Deploy the application into Tomcat Server
    stage('DeployApplicationtoTomcatServer'){
    sshagent(['2c015084-a413-4b2a-a562-a807055884b1']) {
    sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@65.0.87.112:/opt/apache-tomcat-9.0.62/webapps/"
    }
    }
    }//try closing
    catch(e){
    currentBuild.result = "Failed"
    }
    finally{
    sendSlackNotifications(currentBuild.result}
    }
}//node closing
